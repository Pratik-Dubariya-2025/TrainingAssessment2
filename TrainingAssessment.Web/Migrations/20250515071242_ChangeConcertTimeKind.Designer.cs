// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrainingAssessment.Models.Data;

#nullable disable

namespace TrainingAssessment.Web.Migrations
{
    [DbContext(typeof(TrainingAssessmentDbContext))]
    [Migration("20250515071242_ChangeConcertTimeKind")]
    partial class ChangeConcertTimeKind
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TrainingAssessment.Models.Models.BookTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConcertId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ConcertTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("integer");

                    b.Property<int>("TotalTicketBuy")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConcertId");

                    b.HasIndex("UserId");

                    b.ToTable("BookTicket");
                });

            modelBuilder.Entity("TrainingAssessment.Models.Models.Concert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ConcertTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("integer");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Concert");
                });

            modelBuilder.Entity("TrainingAssessment.Models.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id")
                        .HasName("role_pkey");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 15, 7, 12, 42, 164, DateTimeKind.Utc).AddTicks(8156),
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 15, 7, 12, 42, 164, DateTimeKind.Utc).AddTicks(8159),
                            IsDeleted = false,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("TrainingAssessment.Models.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pratik@mailinator.com",
                            FirstName = "Pratik",
                            IsDeleted = false,
                            LastName = "Dubariya",
                            Password = "123",
                            RoleId = 1,
                            Username = "Pratik.Dubariya"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "milan@mailinator.com",
                            FirstName = "Milan",
                            IsDeleted = false,
                            LastName = "Gohel",
                            Password = "123",
                            RoleId = 2,
                            Username = "Milan.Gohel"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jagnesh@mailinator.com",
                            FirstName = "Jagnesh",
                            IsDeleted = false,
                            LastName = "Tank",
                            Password = "123",
                            RoleId = 2,
                            Username = "Jagnesh.Tank"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jignesh@mailinator.com",
                            FirstName = "Jignesh",
                            IsDeleted = false,
                            LastName = "Bambhva",
                            Password = "123",
                            RoleId = 2,
                            Username = "Jignesh.Bambhva"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sandip@mailinator.com",
                            FirstName = "Sandip",
                            IsDeleted = false,
                            LastName = "Lakhdhariya",
                            Password = "123",
                            RoleId = 2,
                            Username = "Sandip.Lakhdhariya"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "simit@mailinator.com",
                            FirstName = "Simit",
                            IsDeleted = false,
                            LastName = "Gamdha",
                            Password = "123",
                            RoleId = 2,
                            Username = "Simit.Gamdha"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dhruv@mailinator.com",
                            FirstName = "Dhruv",
                            IsDeleted = false,
                            LastName = "Savsani",
                            Password = "123",
                            RoleId = 2,
                            Username = "Dhruv.Savsani"
                        });
                });

            modelBuilder.Entity("TrainingAssessment.Models.Models.BookTicket", b =>
                {
                    b.HasOne("TrainingAssessment.Models.Models.Concert", "Concert")
                        .WithMany("BookTickets")
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookticket_concert");

                    b.HasOne("TrainingAssessment.Models.Models.User", "User")
                        .WithMany("BookTickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookticket_user");

                    b.Navigation("Concert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainingAssessment.Models.Models.User", b =>
                {
                    b.HasOne("TrainingAssessment.Models.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TrainingAssessment.Models.Models.Concert", b =>
                {
                    b.Navigation("BookTickets");
                });

            modelBuilder.Entity("TrainingAssessment.Models.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TrainingAssessment.Models.Models.User", b =>
                {
                    b.Navigation("BookTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
